<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.2.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--    1注解驱动-->
    <!--    一、mvc:annotation-driven的作用-->
    <!--    Spring 3.0.x中使用了mvc:annotation-driven后，默认会帮我们注册默认处理请求，参数和返回值的类，-->
    <!--    其中最主要的两个类：DefaultAnnotationHandlerMapping 和 AnnotationMethodHandlerAdapter ，-->
    <!--    分别为HandlerMapping的实现类和HandlerAdapter的实现类，从3.1.x版本开始对应实现类改为了RequestMappingHandlerMapping和-->
    <!--    RequestMappingHandlerAdapter。-->

    <!--    HandlerMapping的实现类的作用-->
    <!--    实现类RequestMappingHandlerMapping，它会处理@RequestMapping 注解，并将其注册到请求映射表中。-->

    <!--    HandlerAdapter的实现类的作用-->
    <!--    实现类RequestMappingHandlerAdapter，则是处理请求的适配器，确定调用哪个类的哪个方法，并且构造方法参数，返回值。-->

    <!--    当配置了mvc:annotation-driven/后，Spring就知道了我们启用注解驱动。然后Spring通过context:component-scan/标签的配置，-->
    <!--    会自动为我们将扫描到的@Component，@Controller，@Service，@Repository等注解标记的组件注册到工厂中，来处理我们的请求。-->
    <mvc:annotation-driven/>

    <!--    2静态资源过滤-->
    <!--    https://blog.csdn.net/codejas/article/details/80055608
    大概意思是默认 Servlet 的 RequestDispatcher 必须通过名称而不是路径来检索。 换句话说就是 Spring MVC 将接收到的所有请求都看作是一个普通的请求，
    包括对于静态资源的请求。这样以来，所有对于静态资源的请求都会被看作是一个普通的后台控制器请求，导致请求找不到而报 404 异常错误
    对于这个问题 Spring MVC 在全局配置文件中提供了一个<mvc:default-servlet-handler/>标签。在 WEB 容器启动的时候会在上下文中定义一个
    DefaultServletHttpRequestHandler，它会对DispatcherServlet的请求进行处理，如果该请求已经作了映射，那么会接着交给后台对应的处理程序，
    如果没有作映射，就交给 WEB 应用服务器默认的 Servlet 处理，从而找到对应的静态资源，只有再找不到资源时才会报错。
    -->
    <mvc:default-servlet-handler/>

    <!--    3扫描包-->
    <!--在xml配置了这个标签后，spring可以自动去扫描base-pack下面或者子包下面的java文件，
    如果扫描到有@Component @Controller@Service等这些注解的类，则把这些类注册为bean

    https://www.cnblogs.com/fightingcoding/p/component-scan.html
    https://blog.csdn.net/chunqiuwei/article/details/16115135
    -->
    <context:component-scan base-package="com.controller"/>

    <!--    4视图解析器-->
    <!--    prefix 这个表示目录-->
    <!--    suffix 这个表示后缀-->
    <!--    @RequestMapping("/advertising")-->
    <!--    public String advertising(Model model ) -->
    <!--    {-->
    <!--        return "ta";-->
    <!--    }-->
    <!--    如上 ta就是查找到ta.jsp 然后往WEB-INF目录进行查找。而WEB-INF是对web来说是安全目录，是不能直接访问里面的资源的-->
    <!--    这个是一个springmvc的视图解析器-->
    <!--    通常是用来配置jsp的-->
    <!--    https://blog.csdn.net/wwzuizz/article/details/78268007-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--    <mvc:resources location="/css/" mapping="/css/**"/>-->
    <!--    <mvc:resources location="/js/" mapping="/js/**"/>-->
    <!--    <mvc:resources location="/media/" mapping="/media/**"/>-->

    <!--    <mvc:resources location="/resource/" mapping="/resource/**" />-->
    <!--    <mvc:resources location="/WEB-INF/jsp/" mapping="/jsp/**"/>-->

    <!--    AutowiredAnnotationBeanPostProcessor用于@Autowired注解的实现-->
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
    <task:scheduler id="myScheduler" pool-size="10"/>
    <!--    ————————————————-->
    <!--    版权声明：本文为CSDN博主「Mars_wen」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。-->
    <!--    原文链接：https://blog.csdn.net/Mars_wen/article/details/79299652-->
</beans>